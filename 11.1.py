'''
Я выбрал библиотеки matplotlib, pandas и numpy. Ниже приведены
примеры использования каждой из этих библиотек.
'''

# Библиотека matplotlib облегчает визуализацию данных, позволяя
# создавать наглядные графики, которые помогают лучше понять данные
# и делать выводы.

import matplotlib.pyplot as plt

# Существующие данные условно, например,
# средние значения по категориям из pandas
categories = ['a', 'b', 'c',' d', 'e']
values = [10, 20, 15, 25, 30]

# 1. Построение столбчатой диаграммы
plt.bar(categories, values)
plt.title('Средние значения по категориям')
plt.xlabel('Категории')
plt.ylabel('Средние значения')
plt.show()

# 2. Построение линейного графика
plt.plot(categories, values, marker='o')
plt.title('Линейный график средних значений по категориям')
plt.xlabel('Категории')
plt.ylabel('Средние значения')
plt.grid()
plt.show()

# 3. Построение круговой диаграммы
plt.pie(values, labels=categories, autopct='%1.1f%%')
plt.title('Доля каждой категории')
plt.axis('equal')
plt.show()

# Библиотека pandas предоставляет мощные инструменты для работы с
# данными, позволяя выполнять широкий спектр операций анализа и
# агрегации, делая анализ данных гораздо более удобным и быстрым.

import pandas as pd

# Создаем CSV-файл для работы с данными
# Данные, которые мы хотим записать в CSV
data = {
    'Имя': ['Михаил','Андрей','Ольга','Василиса','Павел',],
    'Возраст': [30, 25, 35, 20, 43],
    'Город': ['Москва', 'Казань', 'Екатеринбург', 'Чита', 'Магнитогорск'],
        }
df = pd.DataFrame(data)
# Запись DataFrame в CSV-файл
df.to_csv("output.csv", index=False)

# 1. Просмотр первых n строк данных
print("Первые 4 строки данных:")
print('-----------------------------------')
print(df.head(4))
print('-----------------------------------')

# 2. Информация о данных:
print("Информация о данных:")
print('-----------------------------------')
print(df.info())
print('--------------------------')

# 3. Статистика
print("Статистика данных:")
print('-----------------')
print(df.describe())

# Библиотека numpy — это открытая бесплатная библиотека для Python,
# которую применяют для математических вычислений: начиная с базовых
# функций и заканчивая линейной алгеброй. Она ускоряет работу с многомерными
# массивами и матрицами, а также позволяет вычислять много высокоуровневых
# математических функций при работе с массивами данных. Это упрощает работу
# аналитика данных, позволяя ему быстро проводить сложные вычисления.

import numpy as np

# 1. Создание одномерного массива
print('-----------------')
print('Одномерный массив')
arr = np.array([1, 2, 3, 4, 5])
print(arr)

# 2. Создание двумерного массива (матрицы)
print('------------')
print('Матрица')
matrix = np.array([[1, 2, 3], [4, 5, 6]])
print(matrix)

# 3. Экспоненциальная функция
print('-------------------------------------------------------------')
print('Экспоненциальная функция')
a = np.array([0, 1, 2, 3, 4])
exp_values = np.exp(a)
print(exp_values)

'''
1. Библиотека matplotlib
    Создание различных видов графиков (линейные, столбчатые, круговые и т.д.).
    Настройка отображения графиков (метки, заголовки, цвета).
    Сохранение графиков в файлы в различных форматах (PNG, PDF и др.).

2. Библиотека pandas
    Чтение и запись данных в различных форматах (CSV, Excel и т.д.).
    Обработка и анализ данных с использованием DataFrame.
    Фильтрация, агрегация и визуализация данных.
    
3. Библиотека NumPy
    NumPy — это фундаментальный пакет для научных вычислений на Python. Это библиотека 
    Python, которая предоставляет многомерный объект массива, различные производные 
    объекты (такие как маскированные массивы и матрицы) и набор процедур для быстрых 
    операций с массивами,включая математические, логические, манипуляции с формой, 
    сортировку, выборку, ввод-вывод, дискретные преобразования Фурье, базовую линейную 
    алгебру, базовые статистические операции, случайное моделирование и многое другое.  
'''